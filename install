#!/bin/bash

cd "$(dirname "$0")" || exit 1;

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)";
all_files=(`ls -d .* * bin/.* bin/*`);

ignored_files=(
        .
        ..
        .bash.d.local
        .git
        .gitignore
        .irssi
        .netrc
        bin
        bin/.
        bin/..
        install.sh
        offlineimap.conf
        README
        vs2010.vssettings
        vs2012.vssettings
        );

resolve-rel-depth() {
    local d="$(dirname "$1")";
    local p=;

    while [[ $d != $(dirname "$d") ]]; do
        p="../$p";
        d="$(dirname "$d")";
    done;

    echo "$p";
}

resolve-rc-path() {
    local home_dir="$1";
    local rc_dir="$2";

    # h4x; arbitrarily using bash for script, but sneaking in some
    # Perl. ^^
    if perl -E "exit 0 if (\$_ = '${rc_dir}') =~ q'${home_dir}';exit 1;"; then
        perl -E "(\$_ = '${rc_dir}') =~ s,^${home_dir}/,,;say";
    else
        echo "${rc_dir}";
    fi;
}

scm-install() {
    local name="$1";
    local path="$2";
    local repo="$3";

    if [[ ! -d "$path" ]]; then
        while true; do
            echo -n "$name is not found at $path. \
Clone it now from $repo? (Y/n) ";

            read answer;

            if [[ $answer =~ ^[yY] ]]; then
                "${scm_install_cmd[@]}" "$repo" "$path";
                break;
            elif [[ $answer =~ ^[nN] ]]; then
                break;
            fi;
        done;
    fi;
}

symlink() {
    if uname | grep CYGWIN &>/dev/null; then
        local mklink_opts=;
        local link="$(cygpath -w "$2")";
        local path="$(cygpath -w "$1")";


        if [[ -d "$(basename "$1")" ]]; then
            mklink_opts='/d'
        fi;

        if [[ -d "$link" ]]; then
            cmd /c "rmdir /s /q $link" || return $?;
        elif [[ -f "$link" ]]; then
            cmd /c "del $link" || return $?;
        fi;

        cmd /c "mklink $mklink_opts $link $path";
    else
        ln -fs "$1" "$2";
    fi;
};

git-install() {
    scm_install_cmd=(git clone);
    scm-install "$@";
};

hg-install() {
    scm_install_cmd=(hg clone);
    scm-install "$@";
}

rc_dir="$(resolve-rc-path "${HOME}" "${script_dir}")";

for f in "${all_files[@]}"; do
    ignored=;
    for g in "${ignored_files[@]}"; do
        if [ "$f" == "$g" ]; then
            ignored=1;
            break;
        fi;
    done;

    if [ -z "${ignored}" ]; then
        d="$(dirname "$f")";
        p="$(resolve-rel-depth "$f")";
        symlink "${p}${rc_dir}/$f" "${HOME}/${d}";
    fi;
done;

if [[ ! -d ~/.irssi ]]; then
    cp -a .irssi ~;
fi;

evil_path="$HOME/src/evil";
evil_repo='https://bitbucket.org/lyro/evil';

hg-install Evil-mode "$evil_path" "$evil_repo";

#evolve_path="$HOME/src/evolve-main";
#evolve_repo="http://42.netv6.net/evolve-main/";
#hg-install evolve "$evolve_path" "$evolve_repo";

hg_remotebranches_path="$HOME/src/hg-remotebranches";
hg_remotebranches_repo="https://bitbucket.org/durin42/hg-remotebranches";

hg-install hg-remotebranches \
        "$hg_remotebranches_path" "$hg_remotebranches_repo";

irssi_smartfilter_path="$HOME/src/irssi-smartfilter";
irssi_smartfilter_repo="git://github.com/lifeforms/irssi-smartfilter.git";

git-install irssi-smartfilter \
        "$irssi_smartfilter_path" "$irssi_smartfilter_repo";

lawrencium_path="$HOME/src/vim-lawrencium"
lawrencium_repo='https://bitbucket.org/ludovicchabant/vim-lawrencium'

hg-install lawrencium "$lawrencium_path" "$lawrencium_repo";

if [[ $? = 0 ]]; then
    mkdir -p .vim/bundle &&
            symlink "$lawrencium_path" .vim/bundle/lawrencium;
fi;

mercurial_path="$HOME/src/hg";
mercurial_path_rc="$mercurial_path/.hg/hgrc";
mercurial_repo='https://selenic.com/hg';

hg-install mercurial "$mercurial_path" "$mercurial_repo";

if grep 'default\s*=.*selenic' "$mercurial_path_rc" &>/dev/null; then
    sed -i -e 's,default\s*=,upstream =,' "$mercurial_path_rc";
fi;

if ! grep 'default\s*=' "$mercurial_path_rc" &>/dev/null; then
    sed -i -e '/\[paths\]/ a\
default = https://bitbucket.org/bambams/hg\
default-push = https://hg@bitbucket.org/bambams/hg' "$mercurial_path_rc";
fi;

pathogen_path="$HOME/src/vim-pathogen";
pathogen_repo='git://github.com/tpope/vim-pathogen.git';

git-install vim-pathogen "$pathogen_path" "$pathogen_repo";

if [[ $? = 0 ]]; then
    mkdir -p .vim/autoload &&
            symlink "$pathogen_path/autoload/pathogen.vim" \
                    .vim/autoload/pathogen.vim;
fi;

pyenv_path="$HOME/src/pyenv";
pyenv_repo='git://github.com/yyuu/pyenv.git';

git-install pyenv "$pyenv_path" "$pyenv_repo";

pyenv_pip_rehash_path="$pyenv_path/plugins/pyenv-pip-rehash";
pyenv_pip_rehash_repo='git://github.com/yyuu/pyenv-pip-rehash.git';

git-install 'Pyenv Pip Auto-rehash' \
        "$pyenv_pip_rehash_path" "$pyenv_pip_rehash_repo";

rakudobrew_path="$HOME/src/rakudobrew";
rakudobrew_repo='git://github.com/tadzik/rakudobrew.git';

git-install rakudobrew "$rakudobrew_path" "$rakudobrew_repo";

if [[ $? = 0 ]] && [[ ! -L ~/.rakudobrew ]]; then
    symlink src/rakudobrew ~/.rakudobrew;
fi;

rbenv_path="$HOME/src/rbenv";
rbenv_repo='git://github.com/sstephenson/rbenv.git';

git-install rbenv "$rbenv_path" "$rbenv_repo";

ruby_build_path="$rbenv_path/plugins/ruby-build/";
ruby_build_repo='git://github.com/sstephenson/ruby-build.git';

git-install ruby-build "$ruby_build_path" "$ruby_build_repo";

splice_path="$HOME/src/splice";
splice_repo='git://github.com/sjl/splice.vim.git';

git-install splice "$splice_path" "$splice_repo";

if [[ $? = 0 ]]; then
    mkdir -p .vim/bundle && symlink "$splice_path" .vim/bundle/splice;
fi;

vinfo_path="$HOME/src/vinfo";
vinfo_repo='git://github.com/alx741/vinfo.git';

git-install 'Vinfo' "$vinfo_path" "$vinfo_repo";

if [[ $? = 0 ]]; then
    mkdir -p .vim/bundle && ln -fs "$vinfo_path" .vim/bundle/vinfo;
fi;

vim_colorschemes_path="$HOME/src/vim-colorschemes";
vim_colorschemes_repo='git://github.com/flazz/vim-colorschemes.git';

git-install 'Vim Color Schemes' \
        "$vim_colorschemes_path" "$vim_colorschemes_repo";

vim_ps1_path="$HOME/src/vim-ps1";
vim_ps1_repo='https://github.com/PProvost/vim-ps1.git';

git-install 'Vim Powershell Plugin' "$vim_ps1_path" "$vim_ps1_repo";

ruby_depends=(autoconf bison build-essential libssl-dev libyaml-dev
        libreadline6-dev zlib1g-dev libncurses5-dev
        libffi-dev libgdbm3 libgdbm-dev);

cat <<EOF;
Ruby NOTE: Recommended Debian packages at time of writing was:

${ruby_depends[@]}

Consider installing these before attempting to install Ruby distributions.

Source: https://github.com/sstephenson/ruby-build/wiki#suggested-build-environment
EOF

# Install into .bashrc.
if [ "$1" == "-f" ] &&
        ! grep '^\s*(\.|source)\s*(~|$HOME)/.bash.d.source' ~/.bashrc;
        then
    cat <<-'EOF' >> ~/.bashrc;
	
	# Source the awesomeness.
	source ~/.bash.d.source
EOF
fi;
