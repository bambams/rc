#!/bin/bash

cd "$(dirname "$0")" || exit 1;

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)";
all_files=(`ls -d .* *`);

ignored_files=(
        .
        ..
        .git
        .gitignore
        .netrc
        bin
        install.sh
        offlineimap.conf
        README
        vs2010.vssettings
        vs2012.vssettings
        );

function resolve-rc-path
{
    local home_dir="$1";
    local rc_dir="$2";

    # h4x; arbitrarily using bash for script, but sneaking in some
    # Perl. ^^
    if perl -E "exit 0 if (\$_ = '${rc_dir}') =~ q'${home_dir}';exit 1;"; then
        perl -E "(\$_ = '${rc_dir}') =~ s,^${home_dir}/,,;say";
    else
        echo "${rc_dir}";
    fi;
}

scm-install() {
    local name="$1";
    local path="$2";
    local repo="$3";

    if [[ ! -d "$path" ]]; then
        while true; do
            echo -n "$name is not found at $path. \
Clone it now from $repo? (Y/n) ";

            read answer;

            if [[ $answer =~ ^[yY] ]]; then
                "${scm_install_cmd[@]}" "$repo" "$path";
                break;
            elif [[ $answer =~ ^[nN] ]]; then
                break;
            fi;
        done;
    fi;
}

git-install() {
    scm_install_cmd=(git clone);
    scm-install "$@";
};

hg-install() {
    scm_install_cmd=(hg clone);
    scm-install "$@";
}

rc_dir="$(resolve-rc-path "${HOME}" "${script_dir}")";

for f in "${all_files[@]}"; do
    ignored=;
    for g in "${ignored_files[@]}"; do
        if [ "$f" == "$g" ]; then
            ignored=1;
            break;
        fi;
    done;

    if [ -z "${ignored}" ]; then
        ln -f -s "${rc_dir}/$f" "${HOME}";
    fi;
done;

evil_path="$HOME/src/evil";
evil_repo='git://gitorious.org/evil/evil.git';

git-install Evil-mode "$evil_path" "$evil_repo";

irssi_smartfilter_path="$HOME/src/irssi-smartfilter";
irssi_smartfilter_repo="git://github.com/lifeforms/irssi-smartfilter.git";

git-install irssi-smartfilter \
        "$irssi_smartfilter_path" "$irssi_smartfilter_repo";

pathogen_path="$HOME/src/vim-pathogen";
pathogen_repo='git://github.com/tpope/vim-pathogen.git';

git-install vim-pathogen "$pathogen_path" "$pathogen_repo";

if [[ $? = 0 ]]; then
    mkdir -p .vim/autoload &&
            ln -fs "$pathogen_path/autoload/pathogen.vim" \
                    .vim/autoload/pathogen.vim;
fi;

pyenv_path="$HOME/src/pyenv";
pyenv_repo='git://github.com/yyuu/pyenv.git';

git-install pyenv "$pyenv_path" "$pyenv_repo";

pyenv_pip_rehash_path="$pyenv_path/plugins/pyenv-pip-rehash";
pyenv_pip_rehash_repo='git://github.com/yyuu/pyenv-pip-rehash.git';

git-install 'Pyenv Pip Auto-rehash' \
        "$pyenv_pip_rehash_path" "$pyenv_pip_rehash_repo";

rbenv_path="$HOME/src/rbenv";
rbenv_repo='git://github.com/sstephenson/rbenv.git';

git-install rbenv "$rbenv_path" "$rbenv_repo";

ruby_build_path="$rbenv_path/plugins/ruby-build/";
ruby_build_repo='git://github.com/sstephenson/ruby-build.git';

git-install ruby-build "$ruby_build_path" "$ruby_build_repo";

splice_path="$HOME/src/splice";
splice_repo='git://github.com/sjl/splice.vim.git';

git-install splice "$splice_path" "$splice_repo";

if [[ $? = 0 ]]; then
    mkdir -p .vim/bundle && ln -fs "$splice_path" .vim/bundle/splice;
fi;

vim_colorschemes_path="$HOME/src/vim-colorschemes";
vim_colorschemes_repo='git://github.com/flazz/vim-colorschemes.git';

git-install 'Vim Color Schemes' \
        "$vim_colorschemes_path" "$vim_colorschemes_repo";

ruby_depends=(autoconf bison build-essential libssl-dev libyaml-dev
        libreadline6-dev zlib1g-dev libncurses5-dev
        libffi-dev libgdbm3 libgdbm-dev);

cat <<EOF;
Ruby NOTE: Recommended Debian packages at time of writing was:

${ruby_depends[@]}

Consider installing these before attempting to install Ruby distributions.

Source: https://github.com/sstephenson/ruby-build/wiki#suggested-build-environment
EOF

# Install into .bashrc.
if [ "$1" == "-f" ] &&
        ! grep '^\s*(\.|source)\s*(~|$HOME)/.bash.d.source' ~/.bashrc;
        then
    cat <<-'EOF' >> ~/.bashrc;
	
	# Source the awesomeness.
	source ~/.bash.d.source
EOF
fi;
